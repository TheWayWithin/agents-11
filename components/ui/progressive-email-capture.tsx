'use client';

import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { X, Target, Zap, TrendingUp, DollarSign, Mail, ArrowRight } from 'lucide-react';\n\ninterface ProgressiveEmailCaptureProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: EmailCaptureData) => void;\n  className?: string;\n}\n\ninterface EmailCaptureData {\n  email: string;\n  challenge: string;\n  businessType?: string;\n  goals?: string[];\n}\n\ninterface Challenge {\n  id: string;\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  color: string;\n}\n\nconst challenges: Challenge[] = [\n  {\n    id: 'manual-tasks',\n    icon: <Target className=\"h-5 w-5\" />,\n    title: 'Too many manual tasks',\n    description: 'Spending hours on repetitive work',\n    color: 'border-red-200 bg-red-50 text-red-700 hover:bg-red-100',\n  },\n  {\n    id: 'scaling-issues',\n    icon: <TrendingUp className=\"h-5 w-5\" />,\n    title: \"Can't scale without hiring\",\n    description: 'Growth limited by team capacity',\n    color: 'border-blue-200 bg-blue-50 text-blue-700 hover:bg-blue-100',\n  },\n  {\n    id: 'missed-opportunities',\n    icon: <Zap className=\"h-5 w-5\" />,\n    title: 'Missing growth opportunities',\n    description: 'Too busy to pursue new business',\n    color: 'border-purple-200 bg-purple-50 text-purple-700 hover:bg-purple-100',\n  },\n  {\n    id: 'tool-costs',\n    icon: <DollarSign className=\"h-5 w-5\" />,\n    title: 'High software & tool costs',\n    description: 'Expensive subscriptions adding up',\n    color: 'border-green-200 bg-green-50 text-green-700 hover:bg-green-100',\n  },\n];\n\nconst valueProps = {\n  'manual-tasks': {\n    headline: 'Eliminate 15+ Hours of Manual Work Weekly',\n    agents: ['Task Automation Coordinator', 'Workflow Optimizer', 'Smart Prioritizer'],\n    benefit: 'Save 20+ hours per week on repetitive tasks',\n  },\n  'scaling-issues': {\n    headline: 'Scale 5x Without Hiring Anyone',\n    agents: ['Business Growth Manager', 'Operations Coordinator', 'Client Success Agent'],\n    benefit: 'Handle 5x more clients with existing team',\n  },\n  'missed-opportunities': {\n    headline: 'Never Miss a Growth Opportunity Again',\n    agents: ['Opportunity Scanner', 'Lead Generator', 'Business Intelligence Agent'],\n    benefit: 'Automated opportunity identification & capture',\n  },\n  'tool-costs': {\n    headline: 'Replace $500+/Month in Software Costs',\n    agents: ['All-in-One Business Suite', 'Cost Optimizer', 'Tool Consolidator'],\n    benefit: 'Get $100k+ automation for $39/month',\n  },\n};\n\nexport function ProgressiveEmailCapture({\n  isOpen,\n  onClose,\n  onSubmit,\n  className = '',\n}: ProgressiveEmailCaptureProps) {\n  const [step, setStep] = useState<'challenge' | 'email' | 'success'>('challenge');\n  const [selectedChallenge, setSelectedChallenge] = useState<string>('');\n  const [email, setEmail] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  if (!isOpen) return null;\n\n  const handleChallengeSelect = (challengeId: string) => {\n    setSelectedChallenge(challengeId);\n    setStep('email');\n  };\n\n  const handleEmailSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !selectedChallenge) return;\n\n    setIsSubmitting(true);\n    \n    try {\n      await onSubmit({\n        email,\n        challenge: selectedChallenge,\n      });\n      setStep('success');\n    } catch (error) {\n      console.error('Email capture failed:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const selectedChallengeData = challenges.find(c => c.id === selectedChallenge);\n  const valueData = selectedChallenge ? valueProps[selectedChallenge as keyof typeof valueProps] : null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <Card className={`w-full max-w-2xl bg-white relative ${className}`}>\n        {/* Close Button */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 text-gray-400 hover:text-gray-600 z-10\"\n        >\n          <X className=\"h-6 w-6\" />\n        </button>\n\n        {step === 'challenge' && (\n          <div className=\"p-8\">\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <div className=\"text-4xl mb-4\">ðŸŽ¯</div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                See 5 Agents Perfect for Your Business\n              </h2>\n              <p className=\"text-lg text-gray-600\">\n                Tell us your biggest challenge and get instant, personalized recommendations\n              </p>\n            </div>\n\n            {/* Challenge Selection */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                What's your biggest challenge? (Select one)\n              </h3>\n              \n              {challenges.map((challenge) => (\n                <button\n                  key={challenge.id}\n                  onClick={() => handleChallengeSelect(challenge.id)}\n                  className={`w-full p-4 border-2 rounded-lg text-left transition-all hover:shadow-md ${challenge.color}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    {challenge.icon}\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold\">{challenge.title}</div>\n                      <div className=\"text-sm opacity-80\">{challenge.description}</div>\n                    </div>\n                    <ArrowRight className=\"h-5 w-5 opacity-60\" />\n                  </div>\n                </button>\n              ))}\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"mt-8 text-center text-sm text-gray-600\">\n              <div className=\"flex items-center justify-center space-x-6\">\n                <div className=\"flex items-center space-x-1\">\n                  <Mail className=\"h-4 w-4 text-green-600\" />\n                  <span>Instant access</span>\n                </div>\n                <div>â€¢</div>\n                <div>Personalized recommendations</div>\n                <div>â€¢</div>\n                <div>No spam, unsubscribe anytime</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {step === 'email' && selectedChallengeData && valueData && (\n          <div className=\"p-8\">\n            {/* Header with selected challenge */}\n            <div className=\"text-center mb-8\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className={`p-3 rounded-full ${selectedChallengeData.color}`}>\n                  {selectedChallengeData.icon}\n                </div>\n              </div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                {valueData.headline}\n              </h2>\n              <p className=\"text-gray-600\">\n                Based on your challenge: \"{selectedChallengeData.title}\"\n              </p>\n            </div>\n\n            {/* Value Preview */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-6 mb-6\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Your Perfect AI Agents:</h3>\n              <div className=\"space-y-2 mb-4\">\n                {valueData.agents.map((agent, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                    <span className=\"text-sm text-gray-700\">{agent}</span>\n                  </div>\n                ))}\n              </div>\n              <div className=\"text-sm text-blue-700 font-medium bg-blue-100 rounded px-3 py-2\">\n                ðŸ’¡ {valueData.benefit}\n              </div>\n            </div>\n\n            {/* Email Form */}\n            <form onSubmit={handleEmailSubmit} className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Enter your email for instant recommendations:\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"your@email.com\"\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  required\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || !email}\n                className=\"w-full py-3 text-lg font-semibold bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n              >\n                {isSubmitting ? 'Getting Your Agents...' : 'Show Me My Perfect Agents'}\n              </Button>\n            </form>\n\n            {/* Trust Indicators */}\n            <div className=\"mt-6 text-center\">\n              <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-600\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <span>Secured by industry-standard encryption</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {step === 'success' && (\n          <div className=\"p-8 text-center\">\n            <div className=\"text-6xl mb-6\">ðŸŽ‰</div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Check Your Email!\n            </h2>\n            <p className=\"text-lg text-gray-600 mb-6\">\n              We've sent your personalized agent recommendations to{' '}\n              <span className=\"font-semibold text-blue-600\">{email}</span>\n            </p>\n            \n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n              <h3 className=\"font-semibold text-green-800 mb-2\">What's Next:</h3>\n              <div className=\"text-sm text-green-700 space-y-1\">\n                <div>âœ… Check your inbox (and spam folder)</div>\n                <div>âœ… Review your personalized agent recommendations</div>\n                <div>âœ… Start your 7-day trial with one click</div>\n              </div>\n            </div>\n\n            <Button\n              onClick={onClose}\n              className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700\"\n            >\n              Perfect! Let's Go\n            </Button>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}\n\n// Hook for managing the email capture modal\nexport function useEmailCapture() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const open = () => setIsOpen(true);\n  const close = () => setIsOpen(false);\n\n  const handleSubmit = async (data: EmailCaptureData) => {\n    // In production, this would call your API\n    console.log('Email capture data:', data);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // You would typically:\n    // 1. Send to email service (Resend, etc.)\n    // 2. Store in database\n    // 3. Trigger automation sequences\n    // 4. Track conversion events\n  };\n\n  return {\n    isOpen,\n    open,\n    close,\n    handleSubmit,\n  };\n}"